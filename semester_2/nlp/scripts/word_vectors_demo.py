# -*- coding: utf-8 -*-
"""Word Vectors Demo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18qZ9HfqoNmAzuwu4JXWHHFZOkFCbmyRJ
"""

!pip install numpy --upgrade
!pip install gensim --upgrade

import numpy as np
import gensim
import gensim.downloader
import math

#glove-wiki-gigaword-300
modelName = "glove-wiki-gigaword-300"
model = gensim.downloader.load(modelName)

def getWordVector(word):
  return model[word]

print(getWordVector('queen'))

#Finding out the Dot Product of 2 vectors
#Finding out the square root of a number
#Length of a vector(v) = SQRT(DP(v,v))
#CS(x,y) = DP(x,y)/SQRT(DP(x,x)*DP(y,y))

#Dot Product
def getVectorDotProduct(v1, v2):
  return np.dot(v1, v2)

def getWordVectorDotProduct(w1, w2):
  return getVectorDotProduct(getWordVector(w1), getWordVector(w2))

#Vector Length
def getVectorLength(v):
  return math.sqrt(getVectorDotProduct(v, v))

def getWordVectorLength(w):
  return getVectorLength(getWordVector(w))

#Cosine Similarity
def getVectorCosineSimilarity(v1, v2):
  return getVectorDotProduct(v1, v2)/(getVectorLength(v1) * getVectorLength(v2))

def getWordVectorCosineSimilarity(w1, w2):
  return getVectorCosineSimilarity(getWordVector(w1), getWordVector(w2))

def getMostSimilarWord(word):
  return model.most_similar(word)

print(getMostSimilarWord('queen')[0][0])

w1 = 'man'
w2 = 'woman'
print(getWordVectorCosineSimilarity(w1, w2))
s1 = getWordVectorCosineSimilarity('man', 'woman')
s2 = getWordVectorCosineSimilarity('men', 'women')
d = abs(s1-s2)
print("Difference in similarity = ",d)

#wordA : wordB :: wordC : wordD
#D = C + B - A
def completeAnalogy(wordA, wordB, wordC):
  return model.most_similar(positive=[wordC, wordB], negative=[wordA], topn=1)

print(completeAnalogy('man','woman','men')[0][0])

"""Next task:

Implement an MCQ Analogy completer.
Test it using the analogy: ('insect', 'disease', 'war', 'army', 'defeat', 'arsenal', 'destruction')
"""

def completeMCQAnalogy(wordA, wordB, wordC, optionA, optionB, optionC, optionD):
  #X = C+B-A
  vectorX = getWordVector(wordC) + getWordVector(wordB) - getWordVector(wordA)
  bestOption = optionA
  bestSimilarity = getVectorCosineSimilarity(vectorX, getWordVector(optionA))

  #Check for Option B
  similarity = getVectorCosineSimilarity(vectorX, getWordVector(optionB))
  if bestSimilarity < similarity:
    bestSimilarity = similarity
    bestOption = optionB

  #Check for Option C
  similarity = getVectorCosineSimilarity(vectorX, getWordVector(optionC))
  if bestSimilarity < similarity:
    bestSimilarity = similarity
    bestOption = optionC

  #Check for Option D
  similarity = getVectorCosineSimilarity(vectorX, getWordVector(optionD))
  if bestSimilarity < similarity:
    bestSimilarity = similarity
    bestOption = optionD
  return bestOption

completeMCQAnalogy('insect', 'disease', 'war', 'arsenal','defeat','army','destruction')

def completeMCQAnalogyList(wordA, wordB, wordC, options):
  answerVector = getWordVector(wordC) + getWordVector(wordB) - getWordVector(wordA)
  bestOption = options[0]
  bestSimilarity = getVectorCosineSimilarity(answerVector, getWordVector(bestOption))
  for i in range(0, len(options)):
    similarity = getVectorCosineSimilarity(answerVector, getWordVector(options[i]))
    if bestSimilarity < similarity:
      bestSimilarity = similarity
      bestOption = options[i]
  return bestOption

completeMCQAnalogyList('insect', 'disease', 'war', ['arsenal','defeat','army','destruction','trench'])