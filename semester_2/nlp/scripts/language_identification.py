# -*- coding: utf-8 -*-
"""Language Identification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RvDZFy615wCekqyjcBvqFpaxN5y6MXlS
"""

#Credits to Miss Devi S. for a significant chunk of the work.

"""1. Extract the data and upload it in Google Colab.
2. Parse the file using json parser.
"""

import json

def getJSONData(jsonFile):
  with open(jsonFile, "rb") as f:
    data = json.load(f)
  return data

trainingData = getJSONData('train.json')
validationData = getJSONData('valid.json')

"""3. Add the necesary imports that we may need."""

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, cohen_kappa_score, f1_score

"""4. Convert the data which is read from the files into a pandas Data Frame."""

def convertDataIntoDataFrame(data):
  textList = []
  langList = []
  for item in data:
    textList.append(item['text'])
    langList.append(item['langid'])
  df = pd.DataFrame({'text': textList, 'lang': langList})
  return df

trainingDF = convertDataIntoDataFrame(trainingData)
validationDF = convertDataIntoDataFrame(validationData)

"""5. Prepare the values for X (input) and Y (prediction) for training."""

trainX = trainingDF['text']
trainY = trainingDF['lang']
testX = validationDF['text']
testY = validationDF['lang']

"""6. Build the Count Vectorizer."""

vectorizer = CountVectorizer()
trainX_BoW = vectorizer.fit_transform(trainX)
testX_BoW = vectorizer.transform(testX)

"""7. Train the model."""

model = MultinomialNB()
model.fit(trainX_BoW, trainY)
predY = model.predict(testX_BoW)

"""8. Evaluate the model for accuracy score and Cohen's Kappa."""

accuracy = accuracy_score(testY, predY)
kapoa = cohen_kappa_score(testY, predY)
print(accuracy)
print(kapoa)

"""9. Try another classifier - Eg. Logistic Regression"""

model = LogisticRegression()
model.fit(trainX_BoW, trainY)
predY = model.predict(testX_BoW)
accuracy = accuracy_score(testY, predY)
kappa = cohen_kappa_score(testY, predY)
print(accuracy)
print(kappa)

"""10. HOMEWORK: Try out different classifiers (Eg. Random Forest, XGBoost, etc.) and see what works best. Then create an output file with the output predictions for submission."""

#Create an output file to write the data.
output = open('output.txt', 'w')
id = "PUNIV01661" #Enter your roll number here!
output.write(id + '\n')
for item in predY:
  output.write(item + '\n')
output.close()